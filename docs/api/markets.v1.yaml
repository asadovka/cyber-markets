openapi: 3.0.1
servers:
  - url: 'http://api.cybermarkets.io/'
info:
  description: 'Cyber.Markets API'
  version: 1.0.0
  title: Cyber.Markets API
tags:
#  - name: token
#    description: 'Get information about a token'
  - name: exchange
    description: 'Get information about a cryptocurrency exchange'
  - name: raw data
    description: 'Get raw data from exchanges'
  - name: price
    description: 'Get the latest price for a list of one or more currencies'
  - name: ticker
    description: 'Get high, low prices, volumes, etc trading information'
paths:

  ###
  ### Token
  ###
#  '/token/{tokenSymbol}':
#    get:
#      tags:
#        - token
#      summary: 'Get information about the token'
#      description: 'Returns information about the token'
#      operationId: getTokenInfo
#      parameters:
#        - name: tokenSymbol
#          in: path
#          description: 'Token symbol'
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: 'Token found'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/TokenInfo'
#        '400':
#          description: 'Invalid token symbol supplied'
#        '404':
#          description: 'Token not found'

#  '/token/{tokenSymbol}/exchanges':
#    get:
#      tags:
#        - token
#      summary: 'Get a list of exchanges where the token is traded'
#      description: 'Returns information about the exchanges where the token is traded'
#      operationId: getExchangesByPair
#      parameters:
#        - name: tokenSymbol
#          in: path
#          description: 'Token symbol'
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: 'Information found'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ExchangesByToken'
#        '400':
#          description: 'Invalid token symbol supplied'
#        '404':
#          description: 'Token not found'

  ###
  ### Exchange
  ###
  '/exchanges':
    get:
      tags:
        - exchange
      summary: 'Get list of connected exchanges'
      description: 'Returns list of connected exchanges'
      operationId: getConnectedExchanges
      responses:
        '200':
          description: 'Successful'
        '500':
          description: 'Internal server error'

  '/exchanges/tokens':
    get:
      tags:
        - exchange
      summary: 'Get tokens that are trading an the connected exchanges'
      description: 'Returns list of tokens'
      operationId: getTokensByExchanges
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '500':
          description: 'Internal server error'

  '/exchanges/tokens/count':
    get:
      tags:
        - exchange
      summary: 'Get the number of tokens that are trading an the connected exchanges'
      description: 'Returns the number of tokens'
      operationId: getTokensCount
      responses:
        '200':
          description: 'Successful'
        '500':
          description: 'Internal server error'

# not implemented
#  '/exchange/{exchageName}':
#    get:
#      tags:
#        - exchange
#      summary: 'Get information about the exchange'
#      description: 'Returns information about the exchange'
#      operationId: getExchangeInfo
#      parameters:
#        - name: exchageName
#          in: path
#          description: 'Exchange name'
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: 'Exchange found'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ExchangeInfo'
#        '400':
#          description: 'Invalid exchange name supplied'
#        '404':
#          description: 'Exchange not found'

  '/exchange/{exchageName}/tokens':
    get:
      tags:
        - exchange
      summary: 'Get tokens that are trading an the exchange'
      description: 'Returns list of tokens'
      operationId: getTokensByExchanges
      parameters:
        - name: exchageName
          in: path
          description: 'Exchange name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tokens'
        '500':
          description: 'Internal server error'

  '/exchange/{exchageName}/tokens/count':
    get:
      tags:
        - exchange
      summary: 'Get number of tokens that are trading an the exchange'
      description: 'Returns number of tokens'
      operationId: getTokensCountByExchange
      parameters:
        - name: exchageName
          in: path
          description: 'Exchange name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful'
        '500':
          description: 'Internal server error'

  '/exchange/{exchageName}/pairs':
    get:
      tags:
        - exchange
      summary: 'Get pairs that are trading an the exchange'
      description: 'Returns list of pairs'
      operationId: getPairsByExchange
      parameters:
        - name: exchageName
          in: path
          description: 'Exchange name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairsByExchange'
        '400':
          description: 'Invalid exchange name supplied'
        '404':
          description: 'Exchange not found'
  ###
  ### Trade
  ###
  '/trade':
    get:
      tags:
        - raw data
      summary: 'Get pairs that are trading an the the exchange'
      description: 'Returns list of pairs'
      operationId: getTrades
      parameters:
        - name: exchange
          in: query
          description: 'Exchange name'
          required: true
          schema:
            type: string
        - name: pair
          in: query
          description: 'Tokens pair'
          required: true
          schema:
            type: string
        - name: epochMin
          in: query
          description: 'Epoch minute from which we need to get a trades'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trades'
        '400':
          description: 'Invalid parameters supplied'
        '404':
          description: 'Trades not found'

  '/orderbook':
    get:
      tags:
        - raw data
      summary: 'Get order book that for tokens pair'
      description: 'Returns a lists of bid and ask orders'
      operationId: getOrderbook
      parameters:
        - name: exchange
          in: query
          description: 'Exchange name'
          required: true
          schema:
            type: string
        - name: pair
          in: query
          description: 'Tokens pair'
          required: true
          schema:
            type: string
        - name: ts
          in: query
          description: 'Timestamp from which we need to get a orderbook'
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        '200':
          description: 'Order book found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orderbook'
        '400':
          description: 'Invalid parameters supplied'
        '404':
          description: 'Order book not found'


  ###
  ### Price
  ###
  '/price':
    get:
      tags:
        - price
      summary: 'Get the price of a token against multiple tokens'
      description: 'Returns a price of a token'
      operationId: getPrice
      parameters:
        - name: base
          in: query
          description: 'Base token symbol'
          required: true
          schema:
            type: string
        - name: quote
          in: query
          description: 'Quote token symbols, include multiple symbols'
          required: true
          schema:
            type: array
            items:
              type: string
        - name: exchange
          in: query
          description: 'Exchange name'
          required: false
          schema:
            type: string
            default: 'ALL'
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        '400':
          description: "Invalid 'base', 'quote' or 'exchange' parameters supplied"
        '404':
          description: 'Not found'

  '/pricemulti':
    get:
      tags:
        - price
      summary: 'Get a matrix of currency prices'
      description: 'Returns matrix of currency prices'
      operationId: getPriceMulti
      parameters:
        - name: base
          in: query
          description: 'Base token symbols, include multiple symbols'
          required: true
          schema:
            type: array
            items:
              type: string
        - name: quote
          in: query
          description: 'Quote token symbols, include multiple symbols'
          required: true
          schema:
            type: array
            items:
              type: string
        - name: exchange
          in: query
          description: 'Exchange name'
          required: false
          schema:
            type: string
            default: 'ALL'
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pricemulti'
        '400':
          description: "Invalid 'base', 'quote' or 'exchange' parameters supplied"
        '404':
          description: 'Not found'

  ###
  ### Ticker
  ###
  '/ticker':
    get:
      tags:
        - ticker
      summary: 'Get trading info about tokens pair'
      description: 'Returns high, low prices, volumes, etc trading information'
      operationId: getTicker
      parameters:
        - name: symbol
          in: query
          description: 'Token symbol'
          required: true
          schema:
            type: string
        - name: interval
          in: query
          description: 'Ticker time interval in minutes'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
            default: 1
        - name: ts
          in: query
          description: 'Timestamp from which we need to get a tickers'
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
        - name: limit
          in: query
          description: 'Max number of tickers in response'
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 300
            default: 100
      responses:
        '200':
          description: 'Successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tickers'
        '400':
          description: 'Invalid parameters supplied'
        '404':
          description: 'Not found'

components:
  schemas:

    TokenInfo:
      type: object
      properties:
        symbol:
          type: string
        supply:
          type: integer
          format: int64

    ExchangesByToken:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          price:
            type: number
            format: double
          volume:
            type: integer
            format: int64

    ExchangeInfo:
      type: object
      properties:
        name:
          type: string
        volume:
          type: integer
          format: int64
        pairsCount:
          type: integer
          format: int32
        apiUptime:
          type: number
          format: double

    PairsByExchange:
      type: array
      items:
        type: object
        properties:
          tokensPair:
              $ref: '#/components/schemas/TokensPair'
          volume:
            type: number
            format: doouble

    Tokens:
      type: array
      items:
        $ref: '#/components/schemas/Token'

    Trades:
      type: array
      items:
        type: object
        properties:
          exchange:
            type: string
          tokensPair:
            $ref: '#/components/schemas/TokensPair'
          type:
            $ref: '#/components/schemas/TradeType'
          timestamp:
            type: integer
            format: int64
          epochHour:
            type: integer
            format: int64
          tradeId:
            type: string
          baseAmount:
            type: number
            format: double
          quoteAmount:
            type: number
            format: double
          price:
            type: number
            format: double

    Orderbook:
      type: object
      properties:
        asks:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        bids:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        timestamp:
          type: integer
          format: int64

    Order:
      type: object
      properties:
        exchange:
          type: string
        tokensPair:
          $ref: '#/components/schemas/TokensPair'
        type:
          $ref: '#/components/schemas/TradeType'
        timestamp:
          type: integer
          format: int64
        epochHour:
          type: integer
          format: int64
        orderId:
          type: string
        amount:
          type: number
          format: double
        price:
          type: number
          format: double

    Tickers:
      type: array
      items:
        type: object
        properties:
          symbol:
            type: string
          timestampFrom:
            type: integer
            format: int64
          timestampTo:
            type: integer
            format: int64
          interval:
            type: integer
            format: int64
          price:
            $ref: '#/components/schemas/TickerPrice'
          volume:
            $ref: '#/components/schemas/TickerVolume'
          baseVolume:
            $ref: '#/components/schemas/TickerVolume'

    TickerPrice:
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          $ref: '#/components/schemas/TokenPrice'

    TokenPrice:
      type: object
      properties:
        min:
          type: number
          format: double
        max:
          type: number
          format: double
        open:
          type: number
          format: double
        close:
          type: number
          format: double

    TickerVolume:
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: number
          format: double

    TokensPair:
      type: object
      properties:
        base:
          type: string
        quote:
          type: string

    Token:
      type: object
      properties:
        name:
          type: string
        symbol:
          type: string

    TradeType:
      type: string
      enum:
        - 'BID'
        - 'ASK'

    Price:
      type: object
      additionalProperties:
        type: number
        format: double

    Pricemulti:
      type: object
      additionalProperties:
        type: object
        additionalProperties:
          type: number
          format: double